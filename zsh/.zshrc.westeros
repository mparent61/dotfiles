# My Evil Plan!
alias plan='nvim -O ~/Library/Mobile\ Documents/com~apple~CloudDocs/Documents/Tillable/{plan.md,scratch.txt}'

# Terraform concise plan
tfcp () {
    tf plan -out /tmp/tf.plan $* && tf show -json /tmp/tf.plan | jq -r ' .resource_changes[] | select(any(.change.actions[]; IN("no-op", "read")|not)) | [(.change.actions | join(",") | ascii_upcase), (.module_address), (.type), (.name), (.index)] | @tsv ' | column -t
}

function tftree() {
    echo -e "Starting Terraform TREE summary..."
    terraform plan -out plan.tfplan $@
    echo -e "\n"
    terraform show -json plan.tfplan | tf-summarize -tree
    # Delete plan out file to avoid git tracking (although is included in .gitignore)
    if [ -f "plan.tfplan" ]; then rm plan.tfplan; fi
}
alias tft=tftree

function tfsum() {
    echo -e "Starting Terraform summary..."
    terraform plan -out plan.tfplan $@
    echo -e "\n"
    terraform show -json plan.tfplan | tf-summarize
    # Delete plan out file to avoid git tracking (although is included in .gitignore)
    if [ -f "plan.tfplan" ]; then rm plan.tfplan; fi
}
alias tfs=tfsum

export COMMON_TF_CLI_ARGS="-compact-warnings -lock-timeout=1m -parallelism=40"
export TF_CLI_ARGS_plan="$COMMON_TF_CLI_ARGS"
export TF_CLI_ARGS_apply="$COMMON_TF_CLI_ARGS"


#--------------------------------------------------
# Development
#--------------------------------------------------
# Search for outstanding TODO comments
alias todo="rg --glob '!**/check_forbidden_strings.sh' --glob '!docs/style_guide.md' TODO"
# Python
alias pt=pytest
alias ptp='pt -n 3'
# Stop and remove all containers
alias dka='docker ps -aq | xargs docker kill | xargs docker rm'
# Auto-cleanup container, and map volumes for local development + configuration
alias dr='docker compose run \
        --rm \
        --volume "$HOME/.bash_history:/root/.bash_history" \
        --volume "$HOME/.bashrc:/root/.bashrc" \
        --volume "$HOME/.inputrc:/root/.inputrc" \
        --volume "$HOME/.ipython/:/root/.ipython/" \
        --volume "$HOME/.pdbrc.py:/root/.pdbrc.py" \
        --volume "$HOME/.pdbrc:/root/.pdbrc" \
        '
# Default to running bash shell
dra() { cd ~/dev/api && dr admin ${@:-bash}; }
drc() { cd ~/dev/api && dr client ${@:-bash}; }
drl() { cd ~/dev/api && dr almanac ${@:-bash}; }
drs() { cd ~/dev/api && dr silo ${@:-bash}; }

# Allow breakpoints
dba() { cd ~/dev/api && dr --service-ports admin ${@}; }
dbc() { cd ~/dev/api && dr --service-ports client ${@}; }
dbl() { cd ~/dev/api && dr --service-ports almanac ${@}; }
dbs() { cd ~/dev/api && dr --service-ports silo ${@}; }

alias dive="docker run -ti --rm  -v /var/run/docker.sock:/var/run/docker.sock wagoodman/dive"

# Kubernetes
alias kc='kubectx'
alias kn='kubens'

# Enable writing local KubeConfig
#export TF_VAR_write_kubeconfig=true

# 2022-01-10: Fix for running Terraform on Apple M1
export GODEBUG=asyncpreemptoff=1

# Disable AWS CLI use of external pager (just print results and exit)
export AWS_PAGER=""

alias vpn='vpn_start.sh CamoAg'
alias vpn-stop='networksetup -disconnectpppoeservice "CamoAg"'

# Build settings
export LDFLAGS="-L/opt/homebrew/opt/openssl@3/lib"
export CPPFLAGS="-I/opt/homebrew/opt/openssl@3/include"

# Node 
export PATH="/opt/homebrew/opt/node@14/bin:$PATH"

# CURL
export PATH="/opt/homebrew/opt/curl/bin:$PATH"

# Postgres
export PATH="/Applications/Postgres.app/Contents/Versions/12/bin:$PATH"

# NGROK
alias ngf="ngrok http --hostname=tillable.ngrok.io 7777"
# alias ngc="ngrok http --hostname=tillable-api.ngrok.io 9000"
# alias ngs="ngrok http --hostname=tillable-silo.ngrok.io 9002"

# Airbyte
alias airbyte-prod="ssh -i ~/.ssh/keys/PROD_AIRBYTE.pem -L 8000:localhost:8000 -N -f ec2-user@ec2-3-13-134-165.us-east-2.amazonaws.com; open http://localhost:8000"
