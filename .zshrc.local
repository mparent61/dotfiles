# Default user omitted from ZSH prompt
export DEFAULT_USER=michaelparent

export PATH=~/dev/ansible-playbooks/util:$PATH

export PATH=$PATH:~/google-cloud-sdk/bin

#----------------------------------------------------------------------
# Organization
#----------------------------------------------------------------------
alias plan='vim ~/Dropbox/TaskPaper/onion.taskpaper'

#----------------------------------------------------------------------
# SSH
#----------------------------------------------------------------------
# Set special env set on SSH login, allowing custom dev env
export LC_DEVOPS_USER=mparent
alias ssh='ssh -o SendEnv=LC_DEVOPS_USER'

#----------------------------------------------------------------------
# DEVOPS
#----------------------------------------------------------------------
ANSIBLE_ROOT=$HOME/dev/ansible-playbooks
export ANSIBLE_INVENTORY="$ANSIBLE_ROOT/production:$ANSIBLE_ROOT/testing"
export ANSIBLE_INVENTORY="$ANSIBLE_INVENTORY:$ANSIBLE_ROOT/inventory"

#----------------------------------------------------------------------
# DOCKER
#----------------------------------------------------------------------
# NOTHING HERE!

#----------------------------------------------------------------------
# TRAVIS
#----------------------------------------------------------------------
# added by travis gem
[ -f /Users/michaelparent/.travis/travis.sh ] && source /Users/michaelparent/.travis/travis.sh
alias travislogin='travis login --auto --pro'

#----------------------------------------------------------------------
# AUTO COMPLETE
#----------------------------------------------------------------------
autoload bashcompinit
bashcompinit

# Per-script registration (python argcomplete lib doesn't support zsh global registration as of 2015-07-10)
eval "$(register-python-argcomplete ~/dev/ansible-playbooks/util/ash)"
eval "$(register-python-argcomplete ~/dev/ansible-playbooks/util/aip)"

# Start workon on python project
vstart() {
    workon "$@"
    # TODO: Or just look for requirements files?
    local INSTALL_SCRIPT='./scripts/local_install'
    if [ -f $INSTALL_SCRIPT ]; then
        $INSTALL_SCRIPT
    fi
}

#----------------------------------------------------------------------
# FMG VPN
#----------------------------------------------------------------------

export VPN_USER="mparent"

function vpn_password {
  security 2>&1 >/dev/null find-generic-password -ga kinja-vpn \
  | ruby -e 'print $1 if STDIN.gets =~ /^password: "(.*)"$/'
}


function vpn {
    case "$1" in
            us)
                local VPN="vpn-aws.kinja-ops.com"
                vpn_handler $2
                ;;
            eu)
                [ "$2" = "start" ] && vpn us $2 && sleep 1
                local VPN="vpn-aws-eu.kinja-ops.com"
                vpn_handler $2
                ;;
            start)
                vpn us $1
                ;;
            status)
                vpn us $1
                ;;
            stop)
                vpn eu $1
                sleep 1
                vpn us $1
                ;;
            *)
                vpn_handler help
    esac
}

function vpn_handler {
  local HOST=${VPN:-"vpn-aws.kinja-ops.com"}
  local OPENCONNECT=$(pidof "openconnect.*${HOST}")
  local LOCALUSER=$(whoami)

  case "$1" in
    start)
      if [ -z "$OPENCONNECT" ] ; then
        echo "Connecting to VPN ($VPN)..."
        echo $(vpn_password) sudo openconnect --no-dtls --script=/Users/${LOCALUSER}/bin/vpnc-script --background -u ${VPN_USER} --passwd-on-stdin ${HOST}
        echo $(vpn_password) | sudo openconnect --no-dtls --script=/Users/${LOCALUSER}/bin/vpnc-script \
          --background -u ${VPN_USER} --passwd-on-stdin ${HOST}
      echo "Done"
      fi
      ;;
    stop)
      if [ -n "$OPENCONNECT" ] ; then
        echo "Closing VPN connection ($VPN)..."
        sudo kill -SIGINT ${OPENCONNECT}
        echo "Done"
      fi
      ;;
    status)
      if [ -n "$OPENCONNECT" ] ; then
        echo "$HOST VPN is running. PID: $OPENCONNECT"
      else
        echo "$HOST VPN is not running."
        return 1
      fi
      ;;
    help)
      echo "Usage: vpn [us|eu] {start|stop|status|restart}"
      return 1
  esac
}

function pidof {
  COMMAND="$1"
  PID=$(ps -A -o pid,command | grep $COMMAND | grep -v grep | awk '{print $1}')
  if [ -n "$PID" ]; then
    echo "$PID"
  fi
}
