snippet #! "Python Hash Bang"
#!/usr/bin/env python
# encoding: utf-8

endsnippet

snippet im "Import module"
import ${1:module}
endsnippet

snippet fim "From/Import"
from ${1:module} import ${2:target}
endsnippet

snippet absimp "use absolute import" !b
from __future__ import absolute_import
endsnippet

snippet prop "Property" !b
@property
def ${1:name}(self):
    return ${2:value}
endsnippet

snippet propset "Property Setter" !b
@${1:name}.setter
def $1(self, value):
    ${2}
endsnippet

snippet for
for ${1:needle} in ${2:haystack}:
    ${3:# code...}
endsnippet

snippet _ "__magic__"
__${1:init}__${2}
endsnippet

snippet utest "Unittest" !b
import unittest


class ${1:name}Test(unittest.TestCase):

    def test_${2:method}(self):
        ${3}
endsnippet

snippet stest
from test import SessionTest


class ${1:name}Test(SessionTest):
endsnippet

snippet vtest "View Test Case"
from web.test import FunctionalTest, ViewTest


class ${1:name}ViewTest(ViewTest):

    def test_${2:method}(self):
        response = self.get(${3}_view)
        ${4}


class $1AppTest(FunctionalTest):

    def test_$2(self):
        response = self.app.get('/$3')
endsnippet

snippet celerytest "Celery test framework" !b

from test import SessionTest
from task.test import CeleryWorkerTestCase


class ${1:name}Test(SessionTest):

    def test_${2:method}(self):
        pass


class $1IntegrationTest(CeleryWorkerTestCase):

    def test_$2(self):
        pass

endsnippet

snippet setup "unittest setUp method" !b
def setUp(self):
    ${1:base}.setUp(self)
    ${2}

endsnippet

snippet log "standard logging" !b
log = __import__('logging').getLogger(__name__)

endsnippet

snippet celerylog "Celery task logging" !b
from celery.utils.log import get_task_logger
log = get_task_logger(__name__)

endsnippet

snippet disable "PyLint Disable Warning" !b 
# pylint: disable=${1:code}
# pylint: enable=$1
endsnippet

snippet pylint "Inline pylint disable" !
# pylint: disable=${1:code}
endsnippet

snippet skip
@unittest.skip('${1:TODO}')
endsnippet

snippet skipif
@unittest.skipIf(${1:condition}, '${2:message}')
endsnippet

snippet todo
# TODO(mparent): 
endsnippet

snippet noseattr
from nose.plugins.attrib import attr
@attr('${1:category}')
endsnippet

snippet importattr
from nose.plugins.attrib import attr
endsnippet

snippet patch "Mock patch decorator" !b
@patch('${1:target}')
endsnippet

snippet optint "Description" !b
parser.add_option('-${1:short}', '--${2:long}', dest='$2', default=${3:0}, type='int', help='${4:help}')
endsnippet

snippet optstr "Description" !b
parser.add_option('-${1:short}', '--${2:long}', dest='$2', default=${3:None}, help='${4:help}')
endsnippet

snippet argparse "argparse command line args" !b
import argparse

parser = argparse.ArgumentParser(description='Initialize ship database')
${1}
args = parser.parse_args()
endsnippet

snippet argpos "add argparse positional argument" !b
parser.add_argument('${1:name}', metavar='$1', help='${2:help}')
endsnippet

snippet argopt "add argparse optional argument" !b
parser.add_argument('--${1:name}', help='${2:help}')
endsnippet

snippet argbool "add argparse boolean argument" !b
parser.add_argument('--${1:name}', action='store_true', help='${2:help}')
endsnippet

snippet -- "dashed line ---" !b
#----------------------------------------------------------------------
endsnippet

snippet init "object __init__ method" !b
def __init__(self):
    
endsnippet

snippet Enum "SQLAlchemy-friendly enumeration" !b
class ${1:name}(DeclEnum):
    ${2:value} = EnumSymbol('${3:label}')

endsnippet

snippet repr "class __repr__method" !b
def __repr__(self):
    return ${1}
endsnippet

snippet freezegun "FreezeGun plugin" !b
from freezegun import freeze_time
endsnippet

snippet freeze_time "FreezeGun 'freeze_time' context manager" !b
with freeze_time('${1:year}-${2:month}-${3:day}'):
endsnippet

snippet skiptodo "raise SkipTest('TODO') exception" !b
import unittest; raise unittest.SkipTest('TODO')
endsnippet

snippet here "build path to this source file" !b
here = join(dirname(__file__))
endsnippet

snippet futureprint "Import future print() function" !b
from __future__ import print_function
endsnippet

#--------------------------------------------------
# SQLAlchemy
#--------------------------------------------------
snippet hybridprop "SQLAlchemy Hybrid Property" !b
@hybrid_property
def ${1:name}(self):
    return ${2:value}
endsnippet
