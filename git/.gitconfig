[user]
    name = Mike Parent
    email = michael.parent@tillable.com
[core]
    excludesfile = ~/.gitignore_global
    pager = cat
[color]
    branch = auto
    diff = auto
    status = auto
[color "diff"]
    meta = yellow bold
    frag = magenta bold
    old = red
    new = cyan
[color "status"]
    added = cyan
    changed = yellow
    untracked = red
[color "branch"]
    current = yellow reverse
    local = yellow
    remote = green
[alias]
    co = checkout
    co-all = checkout -- .
    # Undo all unstaged modifications
    revertall = checkout -- .

    nb = checkout -b
    br = branch
    # List of branches by date modified
    # TODO: Fixed width columns
    brd = for-each-ref --sort=committerdate refs/heads/ --format='%(color:red)%(objectname:short)%(color:reset) %(color:green)%(committerdate:relative)%(color:reset)\t%(HEAD) %(color:yellow)%(refname:short)%(color:reset) %(contents:subject) - %(authorname)'
    # List merged/unmerged branches
    brm = branch --merged
    brnm = branch --no-merged

    delete-branch = "!f(){ git branch -D ${1} && git push origin --delete ${1}; };f"

    # Safely delete local branches that have been deleted on origin. This includes "squash merge" branches that Git thinks haven't been merged to master.
    # https://stackoverflow.com/a/48411554
    #   1) List local branches whose upstream branch is "gone"
    #   2) Cleanup branch names
    #   3) Remove blank lines
    #   4) Delete!
    delete-gone-branches = !git branch --list --format '%(if:equals=[gone])%(upstream:track)%(then)%(refname:short)%(end)' | sed 's,^refs/heads/,,'  | grep . | xargs git branch -D
    # Useful "grab latest and prune branches" workhorse command
    up = "!git pull && git fetch --prune && git delete-gone-branches"

    mt = mergetool

    ci = commit
    ca = commit -a
    cm = commit -m

    # Short status lines
    st = status -sb

    # Pretty looking log
    ls = log --reverse --pretty=format:"%C(yellow)%h\\ %C(green)%ad\\ %C(blue)%<(14)%cn\\ %C(red)%d%C(reset)\\ %s" --decorate --date=relative --max-count=100
    ld = log --reverse --pretty=format:"%C(yellow)%h\\ %C(green)%ai\\ %C(blue)%<(14)%cn\\ %C(red)%d%C(reset)\\ %s" --decorate --date=short --max-count=100 
    # List commits showing changed files
    ll = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --numstat
    # List w/o colors (for Unix pipes)
    lnc = log --pretty=format:"%h\\ %s\\ [%cn]"

    # List aliases
    la = "!git config -l | grep alias | cut -c 7-"

    # Undo, edit + recommit last commit (for 'Ooops I didn't mean to commit yet')
    # http://stackoverflow.com/a/927386
    # 1) First do this:
    undoci = reset --soft 'HEAD^'
    # 2) edit / add
    # 3) Recommit via:
    redoci = commit -c ORIG_HEAD

    # List files changed vs master
    list-files-changed-vs-master = diff --name-only master

    # Reset
    rh = reset --hard

    # Find file path
    f = "!git ls-files | grep -i"

    # Grep
    grep-changed = !sh -c 'git log -S$1' -

    # Show modified files in last commit
    dl = "!git ll -1"
    dlc = diff --cached HEAD^

    # DirDiff
    dd = difftool --dir-diff

    # Show top stash changes
    stashls = stash list --date=relative
    stashdiff = diff stash@{0}^ stash@{0}
    stashdd = dd stash@{0} stash@{0}^

    # Diff last commit
    difflast = diff HEAD^..HEAD
    ddlast = dd HEAD^..HEAD

    # Repo Info
    rso = remote show origin
	lgb = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset%n' --abbrev-commit --date=relative --branches

[pull]
    rebase = true
[push]
	default = simple
[merge]
	tool = vim-fugitive
[difftool]
    # Stop vim prompting about launching vimdiff
    prompt = false
[diff]
    tool = default-difftool
[difftool "default-difftool"]
    cmd = nvim -f '+next' '+execute \"DirDiff\" argv(1) argv(0)' $REMOTE $LOCAL
[mergetool]
    # Don't create *.orig backup files
	keepBackup = false
[mergetool "vim-fugitive"]
    # 3-way diff
	cmd = nvim -f -c \"Gvdiffsplit!\" \"$MERGED\"
